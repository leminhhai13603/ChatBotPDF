const mcpClient = require('../services/mcp/mcpClient');
const chatModel = require('../models/chatModel');
const pdfModel = require('../models/pdfModel');

exports.searchPDF = async (req, res) => {
  try {
    const { query, pdfId } = req.body;
    const userId = req.user?.id;

    console.log("üîç T√¨m ki·∫øm PDF v·ªõi MCP:", { query, pdfId, userId });

    // S·ª≠ d·ª•ng MCP client ƒë·ªÉ t√¨m ki·∫øm
    const answer = await mcpClient.searchPDF(query, pdfId);

    // L∆∞u l·ªãch s·ª≠ chat n·∫øu c√≥ userId
    if (userId) {
      try {
        let source = "MCP";
        
        if (pdfId) {
          // L·∫•y t√™n PDF n·∫øu c√≥ pdfId
          const pdf = await pdfModel.getPDFById(pdfId);
          if (pdf) {
            source = pdf.pdf_name;
          }
        }
        
        await chatModel.saveChatHistory(userId, query, answer, source);
        console.log("‚úÖ ƒê√£ l∆∞u l·ªãch s·ª≠ chat");
      } catch (chatError) {
        console.error("‚ö†Ô∏è L·ªói khi l∆∞u l·ªãch s·ª≠ chat:", chatError);
        // Kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn response n·∫øu l∆∞u l·ªãch s·ª≠ th·∫•t b·∫°i
      }
    }

    res.json({ answer });
  } catch (error) {
    console.error("‚ùå L·ªói khi t√¨m ki·∫øm v·ªõi MCP:", error);
    res.status(500).json({ 
      error: "L·ªói khi t√¨m ki·∫øm",
      details: error.message
    });
  }
};

// Th√™m c√°c ph∆∞∆°ng th·ª©c kh√°c n·∫øu c·∫ßn 