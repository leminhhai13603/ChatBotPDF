const { savePDFMetadata, savePDFChunks, getAllPDFs, deletePDF, getVectorSearchResult } = require("../models/pdfModel");
const { generateEmbedding } = require("../services/openaiService");
const { queryGroqAI } = require("../services/groqService");
const { RecursiveCharacterTextSplitter } = require("@langchain/textsplitters");
const { OpenAIEmbeddings } = require("@langchain/openai");
const pdfParse = require("pdf-parse");

exports.uploadPDF = async (req, res) => {
    if (!req.file) {
        return res.status(400).json({ error: "Kh√¥ng c√≥ file ƒë∆∞·ª£c t·∫£i l√™n" });
    }

    try {
        const pdfBuffer = req.file.buffer;
        let pdfName = req.file.originalname;

        // üîπ ƒê·∫£m b·∫£o t√™n file gi·ªØ nguy√™n Unicode
        pdfName = Buffer.from(pdfName, 'binary').toString('utf-8');

        // üîπ Chu·∫©n h√≥a t√™n file nh∆∞ng v·∫´n gi·ªØ d·∫•u ti·∫øng Vi·ªát
        const normalizeFileName = (fileName) => {
            return fileName.normalize("NFC") // Gi·ªØ ƒë√∫ng Unicode
                           .replace(/\s+/g, "_") // Thay d·∫•u c√°ch b·∫±ng "_"
                           .replace(/[^a-zA-Z0-9_.\u00C0-\u1EF9]/g, ""); // Gi·ªØ Unicode ti·∫øng Vi·ªát
        };

        pdfName = normalizeFileName(pdfName);

        // üîπ ƒê·ªçc n·ªôi dung PDF
        const data = await pdfParse(pdfBuffer);
        const fullText = data.text.trim();

        if (!fullText) {
            throw new Error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung t·ª´ PDF");
        }

        console.log(`üìÑ ƒêang x·ª≠ l√Ω file: ${pdfName}`);

        // üîπ L∆∞u metadata c·ªßa PDF v√†o database
        const pdfId = await savePDFMetadata(pdfName, fullText);

        // üîπ Chia nh·ªè vƒÉn b·∫£n th√†nh t·ª´ng ƒëo·∫°n (chunks)
        const textSplitter = new RecursiveCharacterTextSplitter({
            chunkSize: 3000,
            chunkOverlap: 200
        });

        const chunks = await textSplitter.createDocuments([fullText]);

        // üîπ T·∫°o embedding b·∫±ng OpenAI
        const openaiEmbeddings = new OpenAIEmbeddings({
            model: "text-embedding-ada-002"
        });

        const embeddings = await openaiEmbeddings.embedDocuments(chunks.map(chunk => chunk.pageContent));

        // üîπ L∆∞u c√°c chunks v√† embeddings v√†o database
        await savePDFChunks(pdfId, chunks.map(chunk => chunk.pageContent), embeddings);

        console.log(`‚úÖ L∆∞u th√†nh c√¥ng ${chunks.length} ƒëo·∫°n t·ª´ file ${pdfName}`);
        res.json({ message: "T·∫£i l√™n th√†nh c√¥ng!", chunks: chunks.length, fileName: pdfName });
    } catch (error) {
        console.error("‚ùå L·ªói khi x·ª≠ l√Ω PDF:", error);
        res.status(500).json({ error: error.message });
    }
};


exports.searchPDF = async (req, res) => {
    try {
        const { query } = req.body;
        if (!query) {
            return res.status(400).json({ error: "Kh√¥ng c√≥ truy v·∫•n t√¨m ki·∫øm" });
        }

        console.log(`üîé ƒêang t√¨m ki·∫øm trong database: ${query}`);

        // üîπ T·∫°o embedding cho c√¢u truy v·∫•n
        const queryEmbedding = await generateEmbedding(query);

        // üîπ T√¨m ki·∫øm trong database
        const searchResults = await getVectorSearchResult(queryEmbedding);

        if (searchResults) {
            console.log(`‚úÖ Database c√≥ k·∫øt qu·∫£ ph√π h·ª£p.`);
            return res.json({ source: "database", answer: searchResults });
        }

        // üîπ N·∫øu database kh√¥ng c√≥, g·ªçi AI
        console.log("ü§ñ Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ trong database, g·ªçi AI...");
        const aiResponse = await queryGroqAI(query);

        return res.json({
            source: "AI",
            answer: aiResponse || "Xin l·ªói, t√¥i kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi n√†y."
        });

    } catch (error) {
        console.error("‚ùå L·ªói khi t√¨m ki·∫øm:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi t√¨m ki·∫øm." });
    }
};



// ‚úÖ L·∫•y danh s√°ch file PDF
exports.getPDFs = async (req, res) => {
    try {
        const files = await getAllPDFs();
        res.json({ files });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch file:", error);
        res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch file" });
    }
};

// ‚úÖ X√≥a file PDF v√† c√°c ƒëo·∫°n text li√™n quan
exports.deletePDF = async (req, res) => {
    const { id } = req.params;
    try {
        const success = await deletePDF(id);
        if (success) {
            res.json({ message: "X√≥a file th√†nh c√¥ng!" });
        } else {
            res.status(404).json({ error: "File kh√¥ng t·ªìn t·∫°i" });
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a file:", error);
        res.status(500).json({ error: "L·ªói khi x√≥a file" });
    }
};
