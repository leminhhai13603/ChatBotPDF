const pdfModel = require("../models/pdfModel");
const openaiService = require("../services/openaiService");
const groqService = require("../services/groqService");
const langchainService = require("../services/langchainService");
const { RecursiveCharacterTextSplitter } = require("langchain/text_splitter");
const pdfParse = require("pdf-parse");
const pool = require("../config/db");
const chatModel = require("../models/chatModel");
const fs = require('fs').promises;
const csv = require('csv-parse/sync');

// H√†m d·ªçn d·∫πp file t·∫°m
const cleanupTempFile = async (filePath) => {
    try {
        await fs.unlink(filePath);
        console.log("‚úÖ ƒê√£ x√≥a file t·∫°m:", filePath);
    } catch (error) {
        console.error("‚ö†Ô∏è L·ªói khi x√≥a file t·∫°m:", error);
    }
};

// Th√™m c√°c h√†m helper ƒë·ªÉ t√°i s·ª≠ d·ª•ng
exports.processFile = async (buffer, fileType) => {
    let fullText = '';
    let chunks = [];

    if (fileType === 'csv') {
        const csvString = buffer.toString('utf-8');
        const rows = parseCSV(csvString);
        fullText = createASCIITable(rows);
        chunks = createCSVChunks(rows);
    } else {
        const data = await pdfParse(buffer);
        fullText = data.text
            .replace(/\r\n/g, '\n')
            .replace(/\n{3,}/g, '\n\n');
        chunks = await splitTextIntoChunks(fullText);
    }

    return { fullText, chunks };
};

exports.generateEmbeddings = async (chunks) => {
    const batchSize = 5;
    const embeddings = [];
    
    for (let i = 0; i < chunks.length; i += batchSize) {
        const batch = chunks.slice(i, i + batchSize);
        const batchEmbeddings = await Promise.all(
            batch.map(chunk => openaiService.generateEmbedding(chunk))
        );
        embeddings.push(...batchEmbeddings);
        console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω ${i + batch.length}/${chunks.length} chunks`);
    }
    
    return embeddings;
};

// S·ª≠a l·∫°i h√†m uploadFile ƒë·ªÉ th√™m public_space_category_id
exports.uploadFile = async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: "Kh√¥ng c√≥ file ƒë∆∞·ª£c upload" });
        }

        const fileName = req.body.originalFileName || decodeURIComponent(req.file.originalname);
        const buffer = req.file.buffer;
        const fileType = fileName.toLowerCase().endsWith('.pdf') ? 'pdf' : 'csv';
        const userId = req.user.id;
        const groupId = req.body.groupId;
        const subCategoryId = req.body.subCategoryId; // Th√™m subCategoryId t·ª´ request
        
        // S·ª≠ d·ª•ng h√†m processFile
        const { fullText, chunks } = await exports.processFile(buffer, fileType);

        // L∆∞u metadata v·ªõi subCategoryId
        const fileId = await pdfModel.savePDFMetadata(
            fileName,
            {
                text: fullText,
                fileType: fileType,
                originalFile: buffer
            },
            userId,
            groupId,
            subCategoryId // Th√™m subCategoryId v√†o ƒë√¢y
        );

        // S·ª≠ d·ª•ng h√†m generateEmbeddings
        const embeddings = await exports.generateEmbeddings(chunks);
        
        // L∆∞u chunks v√† embeddings
        await pdfModel.savePDFChunks(fileId, chunks, embeddings);

        res.json({
            message: "Upload th√†nh c√¥ng",
            fileId,
            fileName: fileName
        });

    } catch (error) {
        console.error("‚ùå L·ªói chi ti·∫øt:", error);
        res.status(500).json({
            error: "L·ªói khi upload file",
            details: error.message
        });
    }
};

exports.getAllPDFs = async (req, res) => {
    try {
        const { page = 1, limit = 5 } = req.query;
        const userId = req.user.id;
        const userRoles = req.user.roles;

        const result = await pdfModel.getAllPDFs(
            userId, 
            userRoles, 
            parseInt(page), 
            parseInt(limit)
        );

        res.json({
            success: true,
            files: result.files,
            total: result.total,
            currentPage: parseInt(page),
            totalPages: result.totalPages
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch file:", error);
        res.status(500).json({ 
            success: false, 
            error: "L·ªói khi l·∫•y danh s√°ch file" 
        });
    }
};

exports.deletePDF = async (req, res) => {
    const { id } = req.params;
    try {
        const success = await pdfModel.deletePDF(id);
        if (success) {
            res.json({ message: "X√≥a file th√†nh c√¥ng!" });
        } else {
            res.status(404).json({ error: "File kh√¥ng t·ªìn t·∫°i" });
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a file:", error);
        res.status(500).json({ error: "L·ªói khi x√≥a file" });
    }
};

exports.searchPDF = async (req, res) => {
    try {
        const { query } = req.body;
        if (!query) {
            return res.status(400).json({ error: "Kh√¥ng c√≥ truy v·∫•n t√¨m ki·∫øm" });
        }

        const userId = req.user.id;
        const userRoles = req.user.roles || [];

        console.log(`üîé ƒêang t√¨m ki·∫øm: "${query}" cho user ${userId}`);

        // T·∫°o embedding cho query
        const queryEmbedding = await groqService.createEmbedding(query);
        
        // T√¨m ki·∫øm trong database v·ªõi ph√¢n quy·ªÅn
        const searchResults = await pdfModel.getVectorSearchResultWithRoles(queryEmbedding, userId, userRoles);
        
        if (searchResults) {
            console.log("‚úÖ T√¨m th·∫•y k·∫øt qu·∫£ trong database");
            
            // T·∫°o prompt th√¥ng minh h∆°n v·ªõi context t·ª´ nhi·ªÅu t√†i li·ªáu
            const prompt = `
            D·ª±a v√†o c√°c ƒëo·∫°n vƒÉn b·∫£n sau ƒë√¢y t·ª´ ${searchResults.length} t√†i li·ªáu, h√£y tr·∫£ l·ªùi c√¢u h·ªèi: "${query}"

            ${searchResults.map(doc => `
            üìÑ T·ª´ t√†i li·ªáu "${doc.pdf_name}":
            ${doc.chunks.map(chunk => `
            ${chunk.section_title ? `[${chunk.section_title}]` : ''}
            ${chunk.content}
            `).join('\n')}
            `).join('\n\n')}
            
            Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c. 
            N·∫øu th√¥ng tin t·ª´ nhi·ªÅu t√†i li·ªáu kh√°c nhau, h√£y t·ªïng h·ª£p v√† n√™u r√µ ngu·ªìn.
            N·∫øu kh√¥ng c√≥ th√¥ng tin li√™n quan, h√£y n√≥i "T√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong t√†i li·ªáu."
            `;
            
            const answer = await groqService.askGroq(prompt);
            
            return res.json({
                source: "database",
                answer: answer,
                documents: searchResults.map(doc => ({
                    name: doc.pdf_name,
                    relevance: doc.chunks[0].similarity
                }))
            });
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y, s·ª≠ d·ª•ng AI
        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y trong database, chuy·ªÉn sang AI");
        const answer = await groqService.askGroq(query);
        
        return res.json({
            source: "groq",
            answer: answer
        });

    } catch (error) {
        console.error("‚ùå L·ªói khi t√¨m ki·∫øm:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi t√¨m ki·∫øm." });
    }
};

// Th√™m API ƒë·ªÉ l·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i
exports.getChatHistory = async (req, res) => {
    try {
        const userId = req.user.id;
        const limit = req.query.limit || 10;
        
        const history = await chatModel.getChatHistory(userId, limit);
        
        res.json({ history });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi l·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i." });
    }
};

// Th√™m API ƒë·ªÉ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i
exports.clearChatHistory = async (req, res) => {
    try {
        const userId = req.user.id;
        
        await chatModel.clearChatHistory(userId);
        langchainService.clearMemoryForUser(userId);
        
        res.json({ message: "ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i." });
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i." });
    }
};

// Th√™m controller ƒë·ªÉ t√°i x·ª≠ l√Ω PDF
exports.reprocessPDF = async (req, res) => {
    try {
        const { id } = req.params;
        const userId = req.user.id;
        const userRoles = req.user.roles || [];
        
        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        const isAdmin = userRoles.some(role => role.toLowerCase() === 'admin');
        if (!isAdmin) {
            return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn t√°i x·ª≠ l√Ω PDF n√†y" });
        }
        
        // L·∫•y th√¥ng tin PDF t·ª´ database
        const pdfInfo = await pdfModel.getPDFById(id);
        if (!pdfInfo) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y PDF" });
        }
        
        // X√≥a c√°c chunks hi·ªán t·∫°i
        await pdfModel.deleteChunks(id);
        
        // X·ª≠ l√Ω l·∫°i PDF v·ªõi c√°ch chunking v√† embedding m·ªõi
        const pdfText = pdfInfo.full_text;
        
        // T·∫°o text splitter v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u
        const textSplitter = new RecursiveCharacterTextSplitter({
            chunkSize: 1000, // Gi·∫£m k√≠ch th∆∞·ªõc chunk ƒë·ªÉ n·∫Øm b·∫Øt ng·ªØ nghƒ©a t·ªët h∆°n
            chunkOverlap: 200, // TƒÉng overlap ƒë·ªÉ gi·ªØ ng·ªØ c·∫£nh gi·ªØa c√°c chunk
            separators: ["\n\n", "\n", ". ", "! ", "? ", ";", ":", " ", ""], // Th√™m nhi·ªÅu d·∫•u ph√¢n c√°ch
        });
        
        // Ph√¢n t√°ch vƒÉn b·∫£n th√†nh c√°c ƒëo·∫°n nh·ªè
        const chunks = await textSplitter.splitText(pdfText);
        console.log(`üìÑ ƒê√£ ph√¢n t√°ch PDF th√†nh ${chunks.length} ƒëo·∫°n`);
        
        // Tr√≠ch xu·∫•t ti√™u ƒë·ªÅ v√† c√°c ph·∫ßn quan tr·ªçng
        const title = extractTitle(pdfText);
        const keywords = extractKeywords(pdfText);
        const sections = extractSections(pdfText);
        
        // T·∫°o metadata cho t·ª´ng chunk
        const metadata = chunks.map((chunk, index) => {
            return {
                chunk_index: index,
                section_title: getSectionForChunk(chunk, sections),
                is_title_chunk: chunk.includes(title),
                keywords: keywords.filter(keyword => 
                    chunk.toLowerCase().includes(keyword.toLowerCase())
                ),
                chunk_length: chunk.length
            };
        });
        
        // X·ª≠ l√Ω t·ª´ng batch ƒë·ªÉ tr√°nh qu√° t·∫£i API
        const batchSize = 20;
        const embeddings = [];
        
        for (let i = 0; i < chunks.length; i += batchSize) {
            const batch = chunks.slice(i, i + batchSize);
            console.log(`üîÑ ƒêang x·ª≠ l√Ω batch ${i/batchSize + 1}/${Math.ceil(chunks.length/batchSize)}`);
            
            // T·∫°o embedding cho batch
            const batchEmbeddings = await Promise.all(
                batch.map(chunk => openaiService.generateEmbedding(chunk))
            );
            embeddings.push(...batchEmbeddings);
        }
        
        // L∆∞u chunks v√† embeddings v·ªõi metadata
        await pdfModel.savePDFChunks(id, chunks, embeddings, metadata);
        
        res.json({ 
            success: true, 
            message: `ƒê√£ t√°i x·ª≠ l√Ω PDF th√†nh c√¥ng v·ªõi ${chunks.length} ƒëo·∫°n` 
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi t√°i x·ª≠ l√Ω PDF:", error);
        res.status(500).json({ 
            error: "L·ªói khi t√°i x·ª≠ l√Ω PDF",
            details: error.message
        });
    }
};

// H√†m tr√≠ch xu·∫•t ti√™u ƒë·ªÅ t·ª´ vƒÉn b·∫£n
const extractTitle = (text) => {
    // L·∫•y 5 d√≤ng ƒë·∫ßu ti√™n
    const firstLines = text.split('\n').slice(0, 5).join(' ');
    // T√¨m ti√™u ƒë·ªÅ b·∫±ng regex
    const titleMatch = firstLines.match(/^(.*?)(:|\.|\n)/);
    return titleMatch ? titleMatch[1].trim() : "Kh√¥ng c√≥ ti√™u ƒë·ªÅ";
};

// H√†m tr√≠ch xu·∫•t t·ª´ kh√≥a t·ª´ vƒÉn b·∫£n
const extractKeywords = (text) => {
    // Danh s√°ch t·ª´ kh√≥a quan tr·ªçng c·∫ßn t√¨m
    const importantKeywords = [
        "AI", "Agentic", "SME", "doanh nghi·ªáp", "nghi√™n c·ª©u", 
        "·ª©ng d·ª•ng", "t·ª± ƒë·ªông h√≥a", "qu·∫£n l√Ω", "t·ªëi ∆∞u h√≥a"
    ];
    
    // T√¨m c√°c t·ª´ kh√≥a xu·∫•t hi·ªán trong vƒÉn b·∫£n
    const foundKeywords = importantKeywords.filter(keyword => 
        text.toLowerCase().includes(keyword.toLowerCase())
    );
    
    return foundKeywords;
};

// H√†m tr√≠ch xu·∫•t c√°c ph·∫ßn t·ª´ vƒÉn b·∫£n
const extractSections = (text) => {
    const sections = [];
    const lines = text.split('\n');
    
    // T√¨m c√°c d√≤ng c√≥ th·ªÉ l√† ti√™u ƒë·ªÅ ph·∫ßn
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        // Ki·ªÉm tra n·∫øu d√≤ng c√≥ d·∫°ng "1. Ti√™u ƒë·ªÅ" ho·∫∑c "1.1 Ti√™u ƒë·ªÅ" ho·∫∑c "I. Ti√™u ƒë·ªÅ"
        if (/^(\d+\.|\d+\.\d+|[IVX]+\.)/.test(line) && line.length < 100) {
            sections.push({
                title: line,
                startIndex: i
            });
        }
    }
    
    return sections;
};

// H√†m x√°c ƒë·ªãnh ph·∫ßn cho chunk
const getSectionForChunk = (chunk, sections) => {
    // T√¨m ph·∫ßn ch·ª©a chunk n√†y
    for (let i = 0; i < sections.length - 1; i++) {
        const currentSection = sections[i];
        const nextSection = sections[i + 1];
        
        if (chunk.includes(currentSection.title) || 
            (chunk.indexOf(currentSection.title) <= 100 && chunk.indexOf(nextSection.title) === -1)) {
            return currentSection.title;
        }
    }
    
    return sections.length > 0 ? sections[sections.length - 1].title : "Kh√¥ng x√°c ƒë·ªãnh";
};

exports.getPDFDetails = async (req, res) => {
    const client = await pool.connect();
    try {
        const pdfId = req.params.id;

        const query = `
            SELECT 
                pf.id,
                pf.pdf_name as title,
                pf.uploaded_at as "uploadedAt",
                pf.full_text as content,
                pf.file_type,
                u.fullname as author,
                psc.name as category,
                r.name as group_name,
                CEIL(LENGTH(pf.full_text) / 1000.0) as "readingTime"
            FROM pdf_files pf
            LEFT JOIN users u ON pf.uploaded_by = u.id
            LEFT JOIN public_space_categories psc ON pf.public_space_category_id = psc.id
            LEFT JOIN roles r ON pf.group_id = r.id
            WHERE pf.id = $1
        `;

        const result = await client.query(query, [pdfId]);

        if (result.rows.length === 0) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu" });
        }

        const pdf = result.rows[0];

        res.json({
            id: pdf.id,
            title: pdf.title,
            uploadedAt: pdf.uploadedAt,
            content: pdf.content,
            author: pdf.author,
            category: pdf.category,
            groupName: pdf.group_name,
            fileType: pdf.file_type || 'pdf',
            readingTime: pdf.readingTime
        });

    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt PDF:", error);
        res.status(500).json({ error: "L·ªói server" });
    } finally {
        client.release();
    }
};

exports.getPDFsByCategory = async (req, res) => {
    const client = await pool.connect();
    try {
        // L·∫•y role_id c·ªßa "kh√¥ng gian chung"
        const publicSpaceQuery = `SELECT id FROM roles WHERE name ILIKE '%kh√¥ng gian chung%'`;
        const publicSpaceResult = await client.query(publicSpaceQuery);
        
        if (publicSpaceResult.rows.length === 0) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y danh m·ª•c kh√¥ng gian chung" });
        }

        const publicSpaceId = publicSpaceResult.rows[0].id;

        const query = `
            SELECT 
                pf.id,
                pf.pdf_name as title,
                pf.uploaded_at as "uploadedAt",
                LEFT(pf.full_text, 300) as excerpt,
                u.fullname as author,
                r.name as category,
                CEIL(LENGTH(pf.full_text) / 1000.0) as "readingTime"
            FROM pdf_files pf
            LEFT JOIN users u ON pf.uploaded_by = u.id
            LEFT JOIN roles r ON pf.group_id = r.id
            WHERE pf.group_id = $1
            ORDER BY pf.uploaded_at DESC
        `;

        const result = await client.query(query, [publicSpaceId]);

        // Format l·∫°i k·∫øt qu·∫£
        const pdfs = result.rows.map(pdf => ({
            id: pdf.id,
            title: pdf.title,
            excerpt: pdf.excerpt + '...',
            uploadedAt: pdf.uploadedAt,
            author: pdf.author,
            category: pdf.category,
            readingTime: pdf.readingTime
        }));

        res.json(pdfs);

    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch PDF:", error);
        res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch PDF" });
    } finally {
        client.release();
    }
};

// H√†m parse CSV
const parseCSV = (text) => {
    const rows = [];
    let currentRow = [];
    let currentCell = '';
    let insideQuotes = false;
    
    for (let i = 0; i < text.length; i++) {
        const char = text[i];
        const nextChar = text[i + 1];
        
        if (char === '"') {
            if (insideQuotes && nextChar === '"') {
                currentCell += '"';
                i++;
            } else {
                insideQuotes = !insideQuotes;
            }
        } else if (char === ',' && !insideQuotes) {
            currentRow.push(currentCell.trim());
            currentCell = '';
        } else if (char === '\n' && !insideQuotes) {
            currentRow.push(currentCell.trim());
            rows.push(currentRow);
            currentRow = [];
            currentCell = '';
        } else {
            currentCell += char;
        }
    }
    
    if (currentCell) {
        currentRow.push(currentCell.trim());
    }
    if (currentRow.length) {
        rows.push(currentRow);
    }
    
    return rows;
};

// H√†m t√≠nh to√°n ƒë·ªô r·ªông c·ªôt
const calculateColumnWidths = (rows) => {
    const columnWidths = [];
    rows.forEach(row => {
        row.forEach((cell, i) => {
            const cellLines = cell.split('\n');
            const cellWidth = Math.max(...cellLines.map(line => line.length));
            columnWidths[i] = Math.max(columnWidths[i] || 0, cellWidth);
        });
    });
    return columnWidths;
};

// H√†m t·∫°o border
const createBorder = (columnWidths) => {
    return '+' + columnWidths.map(w => '-'.repeat(w + 2)).join('+') + '+\n';
};

// H√†m format row
const formatRow = (row, columnWidths) => {
    const lines = row.map(cell => cell.split('\n'));
    const maxLines = Math.max(...lines.map(cell => cell.length));
    
    let result = '';
    for (let i = 0; i < maxLines; i++) {
        result += '|';
        for (let j = 0; j < row.length; j++) {
            const content = (lines[j][i] || '').padEnd(columnWidths[j]);
            result += ` ${content} |`;
        }
        result += '\n';
    }
    return result;
};

// H√†m t·∫°o ASCII table
const createASCIITable = (rows) => {
    const columnWidths = calculateColumnWidths(rows);
    let table = '';
    
    table += createBorder(columnWidths);
    table += formatRow(rows[0], columnWidths);
    table += createBorder(columnWidths);
    
    for (let i = 1; i < rows.length; i++) {
        table += formatRow(rows[i], columnWidths);
        table += createBorder(columnWidths);
    }
    
    return table;
};

// H√†m t·∫°o chunks cho CSV
const createCSVChunks = (rows) => {
    const chunks = [];
    for (let i = 0; i < rows.length; i += 3) {
        const chunkRows = rows.slice(i, Math.min(i + 3, rows.length));
        const chunk = chunkRows.map(row => row.join(' | ')).join('\n');
        chunks.push(chunk);
    }
    return chunks;
};

// H√†m split text th√†nh chunks
const splitTextIntoChunks = async (text) => {
    const splitter = new RecursiveCharacterTextSplitter({
        chunkSize: 1000,
        chunkOverlap: 200,
    });
    
    const docs = await splitter.createDocuments([text]);
    return docs.map(doc => doc.pageContent);
};
