const { GoogleGenerativeAI } = require("@google/generative-ai");
const { OpenAI } = require("openai");
require('dotenv').config();

// Kh·ªüi t·∫°o Gemini API
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Kh·ªüi t·∫°o OpenAI cho vi·ªác t·∫°o embeddings
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

class GeminiService {
    constructor() {
        // Kh·ªüi t·∫°o model
        this.model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
        
        // C·∫•u h√¨nh chat
        this.chatConfig = {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
        };
    }

    /**
     * G·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini v√† nh·∫≠n c√¢u tr·∫£ l·ªùi
     * @param {string} prompt - C√¢u h·ªèi c·∫ßn h·ªèi
     * @returns {Promise<string>} C√¢u tr·∫£ l·ªùi t·ª´ Gemini
     */
    async askGemini(prompt) {
        try {
            console.log("ü§ñ ƒêang g·ª≠i prompt ƒë·∫øn Gemini:", prompt.substring(0, 100) + "...");

            // T·∫°o chat v√† g·ª≠i prompt
            const chat = this.model.startChat({
                generationConfig: this.chatConfig,
                history: [],
            });

            const result = await chat.sendMessage(prompt);
            const response = result.response;
            const text = response.text();

            console.log("‚úÖ Gemini tr·∫£ l·ªùi th√†nh c√¥ng");
            return text;
        } catch (error) {
            console.error("‚ùå L·ªói khi g·ªçi Gemini:", error);
            
            // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
            if (error.message.includes("quota")) {
                throw new Error("ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n quota Gemini API");
            }
            if (error.message.includes("invalid")) {
                throw new Error("API key Gemini kh√¥ng h·ª£p l·ªá");
            }
            
            throw new Error("L·ªói khi g·ªçi Gemini API: " + error.message);
        }
    }

    /**
     * T·∫°o embedding cho vƒÉn b·∫£n s·ª≠ d·ª•ng OpenAI
     * @param {string} text - VƒÉn b·∫£n c·∫ßn t·∫°o embedding
     * @returns {Promise<number[]>} Vector embedding
     */
    async createEmbedding(text) {
        try {
            console.log("üî§ ƒêang t·∫°o embedding cho vƒÉn b·∫£n:", text.substring(0, 100) + "...");

            const response = await openai.embeddings.create({
                model: "text-embedding-ada-002",
                input: text,
            });

            console.log("‚úÖ T·∫°o embedding th√†nh c√¥ng");
            return response.data[0].embedding;
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫°o embedding:", error);
            throw new Error("L·ªói khi t·∫°o embedding: " + error.message);
        }
    }

    /**
     * X·ª≠ l√Ω vƒÉn b·∫£n d√†i b·∫±ng c√°ch chia th√†nh c√°c ph·∫ßn nh·ªè h∆°n
     * @param {string} text - VƒÉn b·∫£n c·∫ßn x·ª≠ l√Ω
     * @returns {Promise<string>} K·∫øt qu·∫£ t·ªïng h·ª£p
     */
    async processLongText(text) {
        try {
            // Chia vƒÉn b·∫£n th√†nh c√°c ph·∫ßn nh·ªè h∆°n (kho·∫£ng 30k k√Ω t·ª±)
            const chunks = this.splitTextIntoChunks(text, 30000);
            const results = [];

            // X·ª≠ l√Ω t·ª´ng ph·∫ßn
            for (let i = 0; i < chunks.length; i++) {
                console.log(`üîÑ ƒêang x·ª≠ l√Ω ph·∫ßn ${i + 1}/${chunks.length}`);
                const result = await this.askGemini(chunks[i]);
                results.push(result);
            }

            // T·ªïng h·ª£p k·∫øt qu·∫£
            if (results.length === 1) {
                return results[0];
            }

            // N·∫øu c√≥ nhi·ªÅu ph·∫ßn, t·ªïng h·ª£p l·∫°i
            const summaryPrompt = `T·ªïng h·ª£p c√°c th√¥ng tin sau th√†nh m·ªôt c√¢u tr·∫£ l·ªùi m·∫°ch l·∫°c:

${results.join('\n\n')}`;

            return await this.askGemini(summaryPrompt);
        } catch (error) {
            console.error("‚ùå L·ªói khi x·ª≠ l√Ω vƒÉn b·∫£n d√†i:", error);
            throw error;
        }
    }

    /**
     * Chia vƒÉn b·∫£n th√†nh c√°c ph·∫ßn nh·ªè h∆°n
     * @param {string} text - VƒÉn b·∫£n c·∫ßn chia
     * @param {number} maxLength - ƒê·ªô d√†i t·ªëi ƒëa c·ªßa m·ªói ph·∫ßn
     * @returns {string[]} M·∫£ng c√°c ph·∫ßn vƒÉn b·∫£n
     */
    splitTextIntoChunks(text, maxLength) {
        const chunks = [];
        let currentChunk = '';
        const sentences = text.split(/(?<=[.!?])\s+/);

        for (const sentence of sentences) {
            if (currentChunk.length + sentence.length > maxLength) {
                chunks.push(currentChunk);
                currentChunk = sentence;
            } else {
                currentChunk += (currentChunk ? ' ' : '') + sentence;
            }
        }

        if (currentChunk) {
            chunks.push(currentChunk);
        }

        return chunks;
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i c·ªßa service
     * @returns {Promise<boolean>} true n·∫øu service ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
     */
    async checkHealth() {
        try {
            const response = await this.askGemini("Hello");
            return response && response.length > 0;
        } catch (error) {
            console.error("‚ùå Service kh√¥ng ho·∫°t ƒë·ªông:", error);
            return false;
        }
    }
}

module.exports = new GeminiService(); 