const pool = require("../config/db");
const bcrypt = require("bcryptjs");

// ‚úÖ T√¨m ng∆∞·ªùi d√πng theo username
exports.getUserByUsername = async (username) => {
    try {
        const result = await pool.query("SELECT * FROM users WHERE username = $1", [username]);
        return result.rows[0] || null;
    } catch (error) {
        throw new Error("L·ªói khi t√¨m ng∆∞·ªùi d√πng theo username!");
    }
};
exports.getUserRoles = async (userId) => {
    try {
        const result = await pool.query(
            `SELECT r.name FROM user_roles ur 
             JOIN roles r ON ur.role_id = r.id 
             WHERE ur.user_id = $1`,
            [userId]
        );
        return result.rows.map(row => row.name);
    } catch (error) {
        throw new Error("L·ªói khi l·∫•y danh s√°ch quy·ªÅn c·ªßa ng∆∞·ªùi d√πng!");
    }
};
exports.getAllRoles = async () => {
    try {
        const result = await pool.query("SELECT * FROM roles ORDER BY id ASC");
        return result.rows;
    } catch (error) {
        throw new Error("L·ªói khi l·∫•y danh s√°ch roles!");
    }
};
exports.getUserById = async (userId) => {
    try {
        const result = await pool.query(
            `SELECT 
                users.id, 
                users.username, 
                users.fullname, 
                ARRAY_REMOVE(ARRAY_AGG(roles.name), NULL) AS roles
            FROM users
            LEFT JOIN user_roles ON users.id = user_roles.user_id
            LEFT JOIN roles ON user_roles.role_id = roles.id
            WHERE users.id = $1
            GROUP BY users.id;`,
            [userId]
        );
        return result.rows[0] || null;
    } catch (error) {
        throw new Error("‚ùå L·ªói khi t√¨m ng∆∞·ªùi d√πng theo ID!");
    }
};


// ‚úÖ T·∫°o t√†i kho·∫£n m·ªõi (role m·∫∑c ƒë·ªãnh l√† "user")
exports.createUser = async (username, password, fullname, roles) => {
    try {
        // BƒÉm m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);
        // T·∫°o user v√† l·∫•y id m·ªõi t·∫°o
        const newUser = await pool.query(
            "INSERT INTO users (username, password, fullname) VALUES ($1, $2, $3) RETURNING id",
            [username, hashedPassword, fullname]
        );
        const userId = newUser.rows[0].id;

        for (let roleId of roles) {
            await pool.query(
                "INSERT INTO user_roles (user_id, role_id) VALUES ($1, $2)",
                [userId, roleId]
            );
        }
        return userId;
    } catch (error) {
        throw new Error("L·ªói khi t·∫°o ng∆∞·ªùi d√πng m·ªõi: " + error.message);
    }
};

// ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n (kh√¥ng thay ƒë·ªïi quy·ªÅn)
exports.updateUser = async (id, fullname) => {
    console.log("üîÑ Updating user:", { id, fullname });

    await pool.query(
        "UPDATE users SET fullname = $1 WHERE id = $2",
        [fullname, id]
    );
};

// ‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u (bƒÉm tr∆∞·ªõc khi l∆∞u)
exports.updatePassword = async (userId, newPassword) => {
    try {
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        await pool.query("UPDATE users SET password = $1 WHERE id = $2", [hashedPassword, userId]);
    } catch (error) {
        throw new Error("L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u!");
    }
};

// ‚úÖ L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng v√† quy·ªÅn c·ªßa h·ªç
exports.getAllUsers = async () => {
    try {
        const result = await pool.query(
            `SELECT u.id, u.username, u.fullname, 
                    ARRAY_REMOVE(ARRAY_AGG(r.name), NULL) AS roles
             FROM users u
             LEFT JOIN user_roles ur ON u.id = ur.user_id
             LEFT JOIN roles r ON ur.role_id = r.id
             GROUP BY u.id
             ORDER BY u.id ASC`
        );
        return result.rows;
    } catch (error) {
        throw new Error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng!");
    }
};

// ‚úÖ C·∫≠p nh·∫≠t quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
exports.updateUserRoles = async (userId, roleIds) => {
    try {
        await pool.query("DELETE FROM user_roles WHERE user_id = $1", [userId]);

        for (const roleId of roleIds) {
            await pool.query(
                "INSERT INTO user_roles (user_id, role_id) VALUES ($1, $2)",
                [userId, roleId]
            );
        }
    } catch (error) {
        throw new Error("L·ªói khi c·∫≠p nh·∫≠t quy·ªÅn ng∆∞·ªùi d√πng: " + error.message);
    }
};


// ‚úÖ X√≥a ng∆∞·ªùi d√πng (x√≥a lu√¥n quy·ªÅn trong user_roles)
exports.deleteUser = async (userId) => {
    try {
        await pool.query("DELETE FROM user_roles WHERE user_id = $1", [userId]);
        await pool.query("DELETE FROM users WHERE id = $1", [userId]);
    } catch (error) {
        throw new Error("L·ªói khi x√≥a ng∆∞·ªùi d√πng!");
    }
};

exports.getUserRolesWithId = async (userId) => {
    const client = await pool.connect();
    try {
        // L·∫•y roles c·ªßa user hi·ªán t·∫°i
        const userRolesQuery = `
            SELECT r.name 
            FROM user_roles ur 
            JOIN roles r ON ur.role_id = r.id 
            WHERE ur.user_id = $1
        `;
        const userRoles = await client.query(userRolesQuery, [userId]);
        
        // Ki·ªÉm tra n·∫øu l√† admin
        const isAdmin = userRoles.rows.some(role => role.name.toLowerCase() === 'admin');

        let query;
        if (isAdmin) {
            // Admin th·∫•y t·∫•t c·∫£ roles
            query = `
                SELECT id as role_id, name 
                FROM roles 
                ORDER BY id
            `;
            const result = await client.query(query);
            return result.rows;
        } else {
            // User th∆∞·ªùng ch·ªâ th·∫•y roles ƒë∆∞·ª£c ph√¢n quy·ªÅn
            query = `
                SELECT r.id as role_id, r.name 
                FROM user_roles ur
                JOIN roles r ON ur.role_id = r.id
                WHERE ur.user_id = $1
                ORDER BY r.id
            `;
            const result = await client.query(query, [userId]);
            return result.rows;
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y roles:", error);
        throw error;
    } finally {
        client.release();
    }
};
