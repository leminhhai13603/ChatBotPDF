const pool = require("../config/db");
const bcrypt = require("bcryptjs");

// ‚úÖ T√¨m ng∆∞·ªùi d√πng theo username
exports.getUserByUsername = async (username) => {
    try {
        const result = await pool.query("SELECT * FROM users WHERE username = $1", [username]);
        return result.rows[0] || null;
    } catch (error) {
        throw new Error("L·ªói khi t√¨m ng∆∞·ªùi d√πng theo username!");
    }
};

// ‚úÖ T√¨m ng∆∞·ªùi d√πng theo ID
exports.getUserById = async (userId) => {
    try {
        const result = await pool.query("SELECT id, username, fullname, role, password FROM users WHERE id = $1", [userId]);
        return result.rows[0] || null;
    } catch (error) {
        throw new Error("L·ªói khi t√¨m ng∆∞·ªùi d√πng theo ID!");
    }
};

// ‚úÖ L∆∞u ng∆∞·ªùi d√πng m·ªõi v√†o DB
exports.createUser = async (username, password, fullname, role = "user") => {
    try {
        const hashedPassword = await bcrypt.hash(password, 10);
        await pool.query(
            "INSERT INTO users (username, password, fullname, role) VALUES ($1, $2, $3, $4)",
            [username, hashedPassword, fullname, role]
        );
    } catch (error) {
        throw new Error("L·ªói khi t·∫°o ng∆∞·ªùi d√πng m·ªõi!");
    }
};
// ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n (kh√¥ng thay ƒë·ªïi m·∫≠t kh·∫©u)
exports.updateUser = async (id, fullname, role) => {
    console.log("üîÑ Updating user:", { id, fullname, role });

    await pool.query(
        "UPDATE users SET fullname = $1, role = $2 WHERE id = $3",
        [fullname, role, id]
    );
};


// ‚úÖ C·∫≠p nh·∫≠t h·ªç v√† t√™n
exports.updateFullname = async (userId, fullname) => {
    try {
        await pool.query("UPDATE users SET fullname = $1 WHERE id = $2", [fullname, userId]);
    } catch (error) {
        throw new Error("L·ªói khi c·∫≠p nh·∫≠t h·ªç v√† t√™n!");
    }
};

// ‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u (bƒÉm tr∆∞·ªõc khi l∆∞u)
exports.updatePassword = async (userId, newPassword) => {
    try {
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        await pool.query("UPDATE users SET password = $1 WHERE id = $2", [hashedPassword, userId]);
    } catch (error) {
        throw new Error("L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u!");
    }
};

// ‚úÖ L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
exports.getAllUsers = async () => {
    try {
        const result = await pool.query("SELECT id, username, fullname, role FROM users ORDER BY id ASC");
        return result.rows;
    } catch (error) {
        throw new Error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng!");
    }
};

// ‚úÖ C·∫≠p nh·∫≠t quy·ªÅn c·ªßa ng∆∞·ªùi d√πng (ch·ªâ d√†nh cho Admin)
exports.updateUserRole = async (userId, role) => {
    try {
        await pool.query("UPDATE users SET role = $1 WHERE id = $2", [role, userId]);
    } catch (error) {
        throw new Error("L·ªói khi c·∫≠p nh·∫≠t quy·ªÅn ng∆∞·ªùi d√πng!");
    }
};

// ‚úÖ X√≥a ng∆∞·ªùi d√πng
exports.deleteUser = async (userId) => {
    try {
        await pool.query("DELETE FROM users WHERE id = $1", [userId]);
    } catch (error) {
        throw new Error("L·ªói khi x√≥a ng∆∞·ªùi d√πng!");
    }
};
